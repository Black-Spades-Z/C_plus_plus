#include <iostream>
#include <string>

using namespace std;

class Cls
{
private:
	int number;
	bool n;

public:
	Cls() {
		number = 0;
		n = 0;
	};
	Cls(int number)
	{
		this->number = number;
		n = 0;
	}
	void Display() const
	{
		cout << number << endl;
	}
	void set(int n)
	{
		number = n;
	}
	istream& operator>>(istream& in)
	{
		in >> number;
		return in;
	}
	bool operator==(Cls& c)
	{
		n = (c.number == number);
		return n;
	}

	friend istream& operator>>(istream& in, Cls& c);
	friend Cls operator+(Cls& x, Cls& y);
	friend ostream& operator<<(ostream& out, Cls &c);

};
Cls operator+(Cls& x, Cls& y)
{
	return Cls(x.number - y.number);
}
istream& operator>>(istream& in, Cls &c)
{
	in >> c.number;
	return in;
}
ostream& operator<<(ostream& out, Cls& c)
{
	out << c.number << endl;
	out << c.n << endl;
	return out;
} 




class Array
{
private:
	int size;
	int* ptr = nullptr;

public:
	Array(int = 10);
	Array(Array& p);
	Array(int *p);
	~Array() {};
	int getSize(int size)
	{
		this->size = size;
		return size;
	}
	ostream& operator<<(ostream& out)
	{
		out << this;
		return out;
	}
	bool operator==(Array& s)
	{
		if (size == s.size)
		{
			for (int i = 0; i < size; i++)
			{
				if (ptr[i] != s.ptr[i])
				{
					return false;
				}
			}
			return true;
		}
		else
		{
			return false;
		}
	}

};
int main() {
	int f[3] = { 1,2,3 };
	int s[3] = { 1,2,3 };
	Array p(f), p2(s);

	cout << (p == p2);

	cin.clear();
	cin.ignore(32767, '\n');
	cin.get();
	return 0;
}